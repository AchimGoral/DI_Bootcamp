DVD RENTAL:

1. SELECT name
FROM languages

2.1 select film.title, film.description, language.name
from film
left join language
on film.language_id = language.language_id

2.2 select film.title, film.description, language.name
from film
full join language
on film.language_id = language.language_id

"Italian"
"French"
"German"
"Mandarin"
"Japanese"

3. CREATE TABLE new_film (
	id SERIAL PRIMARY KEY,
	name VARCHAR (50)
)

INSERT INTO new_film (name)
VALUES
('I Robot'),
('Charlie and the chocolate factory'),
('Focus'),
('The big lebowski'),
('Pulp fiction')

CREATE TABLE customer_review (
	review_id SERIAL PRIMARY KEY,
	film_id INTEGER REFERENCES new_film (id) 
	ON DELETE CASCADE,
	language_id SMALLINT,
	FOREIGN KEY (language_id)
	REFERENCES language (language_id),
	title VARCHAR (50),
	score SMALLINT,
	review_text TEXT,
	last_update DATE
)

5. INSERT INTO customer_review
(film_id, language_id, title, score, review_text, last_update)
VALUES
(3, 1, 'Focus', 8, 'Guy steels stuff with a bunch of other people', '16/02/2021'),
(4, 1, 'The big lebowski', 10, 'The Dude, dude', '16/02/2021')

6. DELETE FROM new_film WHER id = 3

After deleting the movie, the whole review got deleted

EXERCISE_2

1. update customer_review
set language_id = 2
where film_id = 4

2. store_id and address_id are connected as references.
The numbers are picked according to the reference ID's,
so can be in random order depoending on the input

3. drop table customer_review

No extra step, because the dependecies are on a foreign key

4. select count(*) from rental
where return_date is null

5. select rental.rental_id, film.title, film.rental_rate
from (inventory join rental on inventory.inventory_id = rental.inventory_id)
join film on film.film_id = inventory.film_id
where return_date is null
order by rental_rate desc
limit 30

6.1 select film.title
from (actor join film_actor on actor.actor_id = film_actor.actor_id)
join film on film.film_id = film_actor.film_id
where film.description like '%Sumo%' 
and actor.first_name = 'Penelope' 
and actor.last_name = 'Monroe'

6.2 select film.title
from (category join film_category on category.category_id = film_category.category_id)
join film on film.film_id = film_category.film_id
where film.length < 60
and film.rating = 'R'
and category.category_id = 6

6.3 SELECT film.title 
FROM film
ON film.film_id = inventory.film_id
JOIN rental
ON rental.inventory_id = inventory.inventory_id
JOIN customer
ON rental.customer_id = customer.customer_id
WHERE first_name = 'Matthew'
AND last_name = 'Mahan'
AND rental_rate > 4
AND rental.return_date BETWEEN '28/07/2005' AND '01/08/2005'

6.4 SELECT film.title, film.description, film.replacement_cost
FROM film
JOIN inventory
ON film.film_id = inventory.film_id
JOIN rental
ON rental.inventory_id = inventory.inventory_id
JOIN customer
ON rental.customer_id = customer.customer_id
where customer.first_name = 'Matthew'
and customer.last_name = 'Mahan'
and film.title like '%Boat%' 
or film.description like '%Boat%'
order by film.replacement_cost desc
limit 1